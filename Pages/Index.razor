@page "/"
@using System.IO
@using System.Text
@inject HttpClient httpClient;
@inject NavigationManager nav;
@inject IJSRuntime js
@inject IDialogService Dialog
@inject IGrupoServices grupoService
@inject ListSharedService listSharedService
@implements IDisposable


<title value="Index"></title>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-4">
            <h3>Interface Auxiliar de Reposição de Estoque </h3>
            <hr />
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-5">
            <InputFile id="fileInput" OnChange="GetFile" onloadstart="Progress" hidden single />

            <MudButton HtmlTag="label"
                       onchange="GetFile"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Buscar Arquivo Excel
            </MudButton>
        </MudPaper>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Elevation="3" Style="margin-top: 5px;">
                <MudButton HtmlTag="btn"
                           OnClick="GeraRelatorio"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Custom.FileFormats.FilePdf">
                    Relatório
                </MudButton>
                <MudButton HtmlTag="btn" Style="margin-left: 25px;"
                           @onclick="CriarScriptAutomacao"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Filled.Speed">
                    Criar Script de Automação
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="6">

        <MudExpansionPanels Class="py-5">
            <MudExpansionPanel Text="Aplicar Filtros e Configurações">
                <MudPaper Class="align-self-start" Elevation="3" Style="margin-bottom: 7px;">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">Configurações da Lista</MudText>
                    <MudCheckBox @bind-Checked="@ConsumoZero" Label="Não considera Consumo Total igual a zero." Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>
                    <MudCheckBox @bind-Checked="@ReposicaoZero" Label="Não considera Reposição menor que zero." Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>
                    <MudNumericField @bind-Value="fatorReposicao" Label="Fator de Reposição" Variant="Variant.Outlined" Min="1" Max="30" Style="max-width: fit-content; margin-bottom: 20px; margin-left: 20px" />
                </MudPaper>

                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Style="margin-bottom: 7px;">
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Último Movimento</MudText>
                        <MudDateRangePicker @ref="_picker" Label="Período Considerado" @bind-DateRange="_dateRange" DateFormat="dd/MM/yyyy">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                                <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                    </MudItem>
                </MudPaper>
                <MudDivider />
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5">
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Dias de Estoque</MudText>
                        <MudSlider @bind-Value="diasDeEstoque" Step="1" Min="0" Max="15" Color="Color.Info">Valor: Entre 0 e @diasDeEstoque.ToString()</MudSlider>
                    </MudItem>
                </MudPaper>
                <MudDivider/>
                 <MudPaper Class="d-flex align-center justify-center mud-width-full py-5">

                    <MudTreeView T="string" CheckBoxColor="Color.Tertiary" MultiSelection="true" @bind-SelectedValues="SelectedEspecies">
                        <MudTreeViewItem Value="@("Selecionar Espécies")" Selected="true">
                            @foreach (var especie in GetEspecies())
                            {
                                <MudTreeViewItem Value="@(especie)" Selected="true"/>
                            }
                        </MudTreeViewItem>
                    </MudTreeView>
                 </MudPaper>
                <MudPaper Class="d-flex align-center justify-center " Elevation="4" Style="margin-top: 7px; width: 100%;">
                    <MudItem xs="12" sm="6">
                        <MudButton HtmlTag="btn"
                                   Style="width: max-content; margin: 20px;"
                                   OnClick="AplicarFiltrosEConfiguracoes"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Sharp.FilterAlt">
                            Aplicar Filtros e Configurações
                        </MudButton>
                    </MudItem>
                </MudPaper>

            </MudExpansionPanel>
        </MudExpansionPanels>

    </MudItem>
    <MudItem>

    </MudItem>
</MudGrid>

<a href="@nav.BaseUri.Remove(nav.BaseUri.Length -1, 1)/Robot/GetScriptRobot" target="_blank"></a>

@if (GerarRelatorio)
{
    <SelectUnits Unidades="@Unidades" Cancelar="CancelaRelatorio" ListReposicao="@filterList"></SelectUnits>
}
@if (showMessageBox)
{
    <MessageBox Titulo="@tituloMsgBox" Aviso="@avisoMsgBox" okButton="CloseMsgBox" />
}


@if (alert)
{
    <MudAlert Severity="Severity.Info" Elevation="10">A lista está vazia.</MudAlert>
}

@if (erroImport)
{
    <MudAlert Severity="Severity.Error" Elevation="10">OCORREU UM ERRO NA IMPORTAÇÃO DO ARQUIVO EXCEL.</MudAlert>
}

@if (progress)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

}
@if (filterList != null && filterList.Count() > 0)
{
    erroImport = false;
    <MudPaper Class="pa-5 mx-auto" Style="min-width: min-content;" Elevation="15">
        <MudPaper>
            <TabPage repoList="@filterList" RowsPerPage="filterList.Count"></TabPage>
        </MudPaper>
    </MudPaper>
}


@code {
    private bool progress = false;

    private MemoryStream stream2;
    private List<ReposicaoEstoque> filterList;
    MudDateRangePicker _picker;
    public double diasDeEstoque = 5;
    DateRange _dateRange = new DateRange(DateTime.Now.AddDays(-4).Date, DateTime.Now.Date);
    private List<ReposicaoEstoque> listRepo = new();

    private bool showMessageBox;
    private string tituloMsgBox;
    private string avisoMsgBox;

    HashSet<string> SelectedEspecies { get; set; }

    private bool alert = false;
    private bool ConsumoZero { get; set; } = true;
    private bool ReposicaoZero { get; set; } = true;
    private bool ReposicaoMenorIgualZero { get; set; } = false;
    private int fatorReposicao = 1;
    private bool filterItens = false; // itens já foram filtrados?
    private bool erroImport = false;
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };

    private bool GerarRelatorio;
    IEnumerable<string> Unidades;

    protected override void OnInitialized()
    {
        filterList = new();
        listSharedService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        listSharedService.OnChange -= StateHasChanged;
    }


    public void Progress()
    {
        progress = !progress;
    }

    public async Task GetFile(InputFileChangeEventArgs e) //get excel file
    {
        ImportExcelService excelService = new();
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-5.0&pivots=webassembly
        //prepare filestream from uploaded file
        var stream1 = e.File.OpenReadStream();
        stream2 = new MemoryStream();
        await stream1.CopyToAsync(stream2);
        stream1.Close();

        filterList = await excelService.ReadExcel(stream2);
        if (filterList == null)
        {
            erroImport = true;
            return;
        }
        erroImport = false;
        listRepo = ReordenarID(filterList);
        listRepo = listRepo.OrderBy(x => x.Medicamento).ToList();
        listRepo = await AddGrupo(listRepo);
    }


    private void AplicarFiltrosEConfiguracoes()
    {
        if (filterList.Any() is false && listRepo.Any() is false) return;

        #region Filtrar por Espécie
        List<ReposicaoEstoque> listaFiltradaPorEspecie = new();
        if (SelectedEspecies.Any() is false)
        {
            SelectedEspecies = new HashSet<string>(GetEspecies());
        }
        else if (SelectedEspecies.Contains("Selecionar Espécies") && SelectedEspecies.Count == 1)
        {
            SelectedEspecies = new HashSet<string>(GetEspecies());
        }

        foreach (var especie in SelectedEspecies)
        {
            if (especie != "Selecionar Espécies")
            {
                var medicamento = listRepo.Where(m => m.Especie == especie).ToList();
                if (medicamento != null)
                {
                    listaFiltradaPorEspecie.AddRange(medicamento);
                }
            }
        }
        listRepo = listaFiltradaPorEspecie;
        #endregion

        filterList = listRepo.Where(d => d.DiasDeEstoque >= 0 && d.DiasDeEstoque <= diasDeEstoque).ToList();

        filterList = filterList.Where(u => u.UltimoMovimento >= _dateRange.Start && u.UltimoMovimento <= _dateRange.End).ToList();

        CalcularReposicao(filterList);

        if (ConsumoZero) { filterList = filterList.Where(x => x.ConsumoTotal > 0.0f).ToList(); };

        if (ReposicaoZero) { filterList = filterList.Where(x => x.Reposicao >= 0).ToList(); };

        filterList = ReordenarID(filterList);
        if (filterList.Count() == 0)
        {
            alert = true;
            filterItens = false;
        }
        else
        {
            alert = false;
            filterItens = true;
            ClosePanel();
            AddEstiloPosFiltro();
        }
        StateHasChanged();
    }

    private List<ReposicaoEstoque> ReordenarID(List<ReposicaoEstoque> list)
    {
        for (int i = 0; i < list.Count; i++)
        {
            list[i].Id = i;
        }
        return list;
    }

    private async Task<List<ReposicaoEstoque>> AddGrupo(List<ReposicaoEstoque> list)
    {
        var grupos = await grupoService.GetAllGrupos();

        if (grupos is not null)
        {
            foreach (var item in list)
            {
                var nomeGrupo = grupos.FirstOrDefault(x => x.CodigoMV.ToString() == item.CodigoMV);
                if (nomeGrupo is not null) item.NomeGrupo = nomeGrupo.NomeGrupo;
            }
        }

        return list;
    }

    private void CalcularReposicao(List<ReposicaoEstoque> list)
    {
        foreach (var item in list)
        {
            item.Reposicao = ((int)item.ConsumoTotal * fatorReposicao - (int)item.EstoqueAtual);
        }
    }

    private void GeraRelatorio()
    {
        if (filterList.Count == 0 || filterItens == false) return;
        if (VerificaItemZeradoOuNegativo()) return;

        Unidades = GetUnidades();
        listSharedService.SetListReposicao(filterList);
        GerarRelatorio = true;
    }

    private IEnumerable<string> GetUnidades()
    {
        return filterList.OrderBy(x => x.Unidade).Select(x => x.Unidade).Distinct().ToList();
    }

    private IEnumerable<string> GetEspecies()
    {
        return filterList.OrderBy(x => x.Especie).Select(x => x.Especie).Distinct().ToList();
    }

    private void CancelaRelatorio()
    {
        GerarRelatorio = false;
    }

    private void ClosePanel()
    {
        js.InvokeVoidAsync("ClickElementByClass", "mud-expand-panel-header");
    }
    private void AddEstiloPosFiltro()
    {
        js.InvokeVoidAsync("AdicionarEstiloPosFiltro");
    }

    private void CriarScriptAutomacao()
    {
        if (filterList.Count == 0 || filterItens == false) return;
        if (VerificaItemZeradoOuNegativo()) return;
        if (VerificaItensDuplicados()) return;
        listSharedService.SetListReposicao(filterList);
        NavigateToNewTab();
    }

    private bool VerificaItemZeradoOuNegativo()
    {
        var itensZerados = filterList.Where(x => x.Reposicao <= 0).ToList();
        if (itensZerados.Count > 0)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Há itens zerados ou negativos na lista de reposição: ");
            foreach (var item in itensZerados)
            {
                sb.AppendLine("Cód." + item.CodigoMV + " " + item.Medicamento);
            }
            var aviso = sb.ToString();
            ShowMsgBox("Aviso", aviso);
            return true;
        }
        else
        {
            alert = false;
            return false;
        }
    }

    private bool VerificaItensDuplicados()
    {
        var itensDuplicados = filterList.GroupBy(g => g.CodigoMV).Where(c => c.Count() > 1).Select(s => s.Key).ToList();

        if (itensDuplicados.Count() > 0)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Há itens duplicados na lista de reposição: ");
            foreach (var item in itensDuplicados)
            {
                var itemDuplicado = filterList.Where(x => x.CodigoMV.Equals(item)).FirstOrDefault();
                if (itemDuplicado is not null)
                {
                    sb.AppendLine("Cód." + itemDuplicado.CodigoMV + " " + itemDuplicado.Medicamento);
                }
            }
            var aviso = sb.ToString();
            ShowMsgBox("Aviso", aviso);
            return true;
        }
        else
        {
            alert = false;
            return false;
        }
    }

    public async Task NavigateToNewTab()
    {
        string url = "/Robot";
        await js.InvokeAsync<object>("open", url, "_blank");
    }

    private void ShowMsgBox(string titulo, string aviso)
    {
        this.tituloMsgBox = titulo;
        this.avisoMsgBox = aviso;
        showMessageBox = true;
    }

    private void CloseMsgBox()
    {
        showMessageBox = false;
    }
}
