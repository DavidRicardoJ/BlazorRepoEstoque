@page "/"
@using System.IO
@using System.Text
@using BlazorRepoEstoque.Shared.SharedState

@inject HttpClient httpClient;
@inject NavigationManager nav;
@inject IJSRuntime js
@inject IDialogService DialogService
@inject IGroupService grupoService
@inject IFiltrosServices _filtrosServices
@inject ListSharedService listSharedService
@inject IProdutoEstoqueMinimoService _produtoEstoqueMinimoService
@inject ManagerStateAppService _managerStateAppService



<title value="Home"></title>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-4 mud-theme-tertiary">
            <h3>Interface Auxiliar de Reposição de Estoque </h3>
            <hr />
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-5">
            <InputFile id="fileInput" OnChange="GetFile" hidden single accept=".xlsx" />

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="fileInput">
                Buscar Arquivo Excel
            </MudButton>
        </MudPaper>

        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Elevation="3" Style="margin-top: 3px;">
                <MudButton HtmlTag="btn"
                           OnClick="GeraRelatorio"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Custom.FileFormats.FilePdf">
                    Relatório
                </MudButton>
                <MudButton HtmlTag="btn" Style="margin-left: 25px;"
                           @onclick="CriarScriptAutomacao"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Speed">
                    Criar Script de Automação
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudItem>
    <MudItem xs="6">

        <MudExpansionPanels Class="py-3" Style="margin:-1px;" Elevation="7">
            <MudExpansionPanel Text="Aplicar Filtros e Configurações">

                <MudPaper Class="align-self-start" Elevation="3" Style="margin-bottom: 7px; height:contain">
                    <MudItem xs="12" sm="8">
                        <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">Configurações da Lista</MudText>
                        <MudCheckBox @bind-Value="@_managerStateAppService.ConsumoZero" T="bool" Label="Não considera Consumo Total igual a zero."
                                     Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>

                        <MudCheckBox @bind-Value="@_managerStateAppService.ReposicaoMenorZero" T="bool" Label="Não considera Reposição menor que zero."
                                     Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>

                        <MudCheckBox @bind-Value="@_managerStateAppService.ReposicaoIgualZero" T="bool" Label="Não considera Reposição igual a zero."
                                     Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>

                        <MudCheckBox @bind-Value="@_managerStateAppService.ExcluirItensDuplicados" T="bool" Label="Excluir itens duplicados."
                                     Color="Color.Secondary" Style="margin-bottom: 10px;"></MudCheckBox>

                        <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-5">
                            <MudNumericField T="int" @bind-Value="_managerStateAppService.fatorReposicao" Label="Fator de Reposição" Variant="Variant.Outlined"
                                             Min="1" Max="31" Step="1" Style="max-width: contain; margin-bottom: 20px;" />
                        </MudContainer>
                    </MudItem>
                </MudPaper>

                @*  Último Movimento *@
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Style="margin-bottom: 7px;">
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Último Movimento</MudText>
                        <MudDateRangePicker @ref="_managerStateAppService._picker" Label="Período Considerado" @bind-DateRange="_managerStateAppService._dateRange" DateFormat="dd/MM/yyyy">

                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _managerStateAppService._picker.ClearAsync())">Clear</MudButton>
                                <MudButton OnClick="@(() => _managerStateAppService._picker.CloseAsync(false))">Cancel</MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() =>_managerStateAppService._picker.CloseAsync())">Ok</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                    </MudItem>
                </MudPaper>

                @*  Dias de Estoque *@                
                <MudDivider />
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5">
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Dias de Estoque</MudText>
                        <MudSlider @bind-Value="_managerStateAppService.diasDeEstoque" Step="1" Min="0" Max="15" Color="Color.Info">Valor: Entre 0 e @_managerStateAppService.diasDeEstoque.ToString()</MudSlider>
                    </MudItem>
                </MudPaper>
                <MudDivider />

                @*  filtro por espécie *@
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Style="width: contain">
                    <MudSelect T="string" Label="Selecionar Espécies" MultiSelection="true" Clearable
                               @bind-SelectedValues="_managerStateAppService.SelectedEspecies" SelectAll="false">
                        @foreach (var especie in GetEspecies())
                        {
                            <MudSelectItem T="string" Value="@especie" />
                        }
                    </MudSelect>
                </MudPaper>

                @*  filtro por Grupo *@
                <MudDivider />
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5" Style="width: contain">
                    <MudSelect T="string" Label="Selecionar Grupo" MultiSelection="true" Clearable
                               @bind-SelectedValues="_managerStateAppService.SelectedGroups" SelectAll="false">
                        @foreach (var grupo in GetGrupos())
                        {
                            <MudSelectItem T="string" Value="@grupo" />
                        }
                    </MudSelect>
                </MudPaper>
                <MudDivider />
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-5 flex-column">

                    <MudSwitch T="bool" @bind-Value="_managerStateAppService.ativeProdutoEstoqMin"
                               CheckedChanged="OnAtiveProdutoEstoqMinChanged" Color="Color.Error">
                        Considerar Lista de Produtos com Estoque Minímo
                    </MudSwitch>

                    @if (_managerStateAppService.ativeProdutoEstoqMin)
                    {
                        if (_managerStateAppService.SelectedEspecies.Contains("MEDICAMENTOS") || _managerStateAppService.SelectedEspecies.Contains("MEDICAMENTOS CONTROLADOS"))
                        {
                            _managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueOrigem = 2;
                        }
                        else
                        {
                            _managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueOrigem = 1;
                        }
                        <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                            <MudNumericField @bind-value="_managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueOrigem" @ref="_managerStateAppService.numericField" Required="true"
                                             RequiredError="Código obrigatório." Error="_managerStateAppService.numericFieldErro"
                                             Label="Código do Estoque do Almoxarifado" Variant="Variant.Outlined" />
                        </MudContainer>
                    }

                </MudPaper>

                @* Aplicar Filtros *@
                <MudDivider />
                <MudPaper Class="d-flex align-center justify-center " Elevation="4" Style="margin-top: 7px; width: 100%;">
                    <MudItem xs="12" sm="6">
                        <MudButton HtmlTag="btn"
                                   Style="width: max-content; margin: 20px;"
                                   OnClick="_filtrosServices.AplicarFiltrosEConfiguracoes"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Sharp.FilterAlt">
                            Aplicar Filtros e Configurações
                        </MudButton>
                    </MudItem>
                </MudPaper>

            </MudExpansionPanel>
        </MudExpansionPanels>

        <MudItem xs="12" Style="margin-bottom: 5px">

            @if (_managerStateAppService.FarmaciaDestino is not null)
            {
                <MudPaper Class="d-flex align-center justify-center" Elevation="4" Style=" width: 100%; padding: 5px;">
                    <MudStack>
                        <MudText Color="Color.Info" Typo="Typo.h6">@_managerStateAppService.FarmaciaDestino, ESTOQUE: @_managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueDestino</MudText>
                        <MudText Color="Color.Dark">Período: @_managerStateAppService.periodoImportacaoExcel</MudText>
                    </MudStack>
                    <MudFab IconColor="Color.Warning" StartIcon="@Icons.Material.Filled.Add" Class="ml-6 pl-2" Disabled="!_managerStateAppService.filterItens"
                            Label="Novo Item" Color="Color.Primary" Size="Size.Medium" OnClick="OpenDialogAddProduto" />
                </MudPaper>
            }

        </MudItem>
    </MudItem>
</MudGrid>



<a href="@nav.BaseUri.Remove(nav.BaseUri.Length -1, 1)/Robot/GetScriptRobot" target="_blank"></a>

@if (_managerStateAppService.GerarRelatorio)
{
    <SelectUnits Unidades="@_managerStateAppService.Unidades" Cancelar="CancelaRelatorio" ListReposicao="@_managerStateAppService.listReposicaoComFiltro"></SelectUnits>
}
@if (_managerStateAppService.showMessageBox)
{
    <MessageBox Titulo="@_managerStateAppService.tituloMsgBox" Aviso="@_managerStateAppService.avisoMsgBox" okButton="CloseMsgBox" />
}


@if (_managerStateAppService.alert)
{
    <MudAlert Severity="Severity.Info" Elevation="10">A lista está vazia.</MudAlert>
}

@if (_managerStateAppService.erroImport)
{
    <MudAlert Severity="Severity.Error" Elevation="10">OCORREU UM ERRO NA IMPORTAÇÃO DO ARQUIVO EXCEL.</MudAlert>
}

@if (_managerStateAppService.progress)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />

}
@if (_managerStateAppService.ListImportadaOriginal != null &&_managerStateAppService.ListImportadaOriginal.Count() > 0)
{
    _managerStateAppService.erroImport = false;
    <MudPaper Class="pa-5 mx-auto" Style="min-width: min-content;" Elevation="15">
        <MudPaper>
            <TabPage repoList="@_managerStateAppService.listReposicaoComFiltro" RowsPerPage="_managerStateAppService.listReposicaoComFiltro.Count"></TabPage>
        </MudPaper>
    </MudPaper>
    <ComponentAddProduto ListReposicaoEstoque="@_managerStateAppService.listReposicaoComFiltro" />
}



@code {

    protected override void OnInitialized()
    {
        _managerStateAppService.ListImportadaOriginal = new();
        _managerStateAppService.listReposicaoComFiltro = new();
        listSharedService.OnChange += StateHasChanged;
        _managerStateAppService.ReposicaoMenorZero = true;
        _managerStateAppService.ConsumoZero = true;
    }

    public void Progress()
    {
        _managerStateAppService.progress = !_managerStateAppService.progress;
    }

    public async Task GetFile(InputFileChangeEventArgs e) //get excel file
    {
        ImportExcelService excelService = new();
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/file-uploads?view=aspnetcore-5.0&pivots=webassembly
        //prepare filestream from uploaded file
        var stream1 = e.File.OpenReadStream();
        _managerStateAppService.stream2 = new MemoryStream();
        await stream1.CopyToAsync(_managerStateAppService.stream2);
        stream1.Close();

        _managerStateAppService.ListImportadaOriginal = await excelService.ReadExcel(_managerStateAppService.stream2);
        if (_managerStateAppService.ListImportadaOriginal == null)
        {
            _managerStateAppService.erroImport = true;
            return;
        }
        _managerStateAppService.erroImport = false;


        _managerStateAppService.ListImportadaOriginal = _filtrosServices.ReordenarID(_managerStateAppService.ListImportadaOriginal);
        _managerStateAppService.ListImportadaOriginal = _managerStateAppService.ListImportadaOriginal.OrderBy(x => x.Medicamento).ToList();
        _managerStateAppService.ListImportadaOriginal = await AddGrupo(_managerStateAppService.ListImportadaOriginal);

        _managerStateAppService.listReposicaoComFiltro = _filtrosServices.CloneListaImportada();
        LoadGrupos();
        LoadEspecies();

        _managerStateAppService.FarmaciaDestino = _managerStateAppService.ListImportadaOriginal[0].Farmacia;
        _managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueDestino = _managerStateAppService.ListImportadaOriginal[0].CodigoEstoque;
        _managerStateAppService.periodoImportacaoExcel = _managerStateAppService.ListImportadaOriginal[0].PeriodoImportacaoExcel;
    }

   

    private void LoadGrupos()
    {
        _managerStateAppService.SelectedGroups = GetGrupos().ToHashSet();
    }
    private void LoadEspecies()
    {
        _managerStateAppService.SelectedEspecies = GetEspecies().ToHashSet();
    }

    private async Task<List<ReposicaoEstoque>> AddGrupo(List<ReposicaoEstoque> list)
    {
        var grupos = await grupoService.GetAllGrupoProdutos();

        if (grupos is not null)
        {
            foreach (var item in list)
            {
                var nomeGrupo = grupos.FirstOrDefault(x => x.Produto.IdMedicamento.ToString() == item.CodigoMV);

                if (nomeGrupo is not null)
                {
                    item.NomeGrupo = nomeGrupo.Grupo.GroupName;
                }
                else
                {
                    item.NomeGrupo = "PRODUTOS SEM GRUPO";
                }
            }
        }

        return list;
    }

   

    private void GeraRelatorio()
    {
        if (_managerStateAppService.listReposicaoComFiltro.Count == 0 || _managerStateAppService.filterItens == false) return;
        if (VerificaItemZeradoOuNegativo()) return;

        _managerStateAppService.Unidades = GetUnidades();
        listSharedService.SetListReposicao(_managerStateAppService.listReposicaoComFiltro);
        _managerStateAppService.GerarRelatorio = true;
    }

    private IEnumerable<string> GetUnidades()
    {
        return _managerStateAppService.listReposicaoComFiltro.OrderBy(x => x.Unidade).Select(x => x.Unidade).Distinct().ToList();
    }

    private IEnumerable<string>
        GetEspecies()
    {
        return _managerStateAppService.ListImportadaOriginal.OrderBy(x => x.Especie).Select(x => x.Especie).Distinct().ToList();
    }

    private IEnumerable<string>
        GetGrupos()
    {
        return _managerStateAppService.ListImportadaOriginal.OrderBy(x => x.NomeGrupo).Select(x => x.NomeGrupo).Distinct().ToList();
    }

    private void CancelaRelatorio()
    {
        _managerStateAppService.GerarRelatorio = false;
    }


    private void CriarScriptAutomacao()
    {
        if (_managerStateAppService.listReposicaoComFiltro.Count == 0 || _managerStateAppService.filterItens == false) return;
        if (VerificaItemZeradoOuNegativo()) return;
        if (VerificaItensDuplicados()) return;
        listSharedService.SetListReposicao(_managerStateAppService.listReposicaoComFiltro);
        listSharedService.Farmacia = _managerStateAppService.FarmaciaDestino;
        listSharedService.CodigoEstoque = _managerStateAppService.EstoqueOrigemEstoqueDestino.EstoqueDestino;
        NavigateToNewTab();
    }

    private bool VerificaItemZeradoOuNegativo()
    {
        var itensZerados = _managerStateAppService.listReposicaoComFiltro.Where(x => x.Reposicao <= 0).ToList();
        if (itensZerados.Count > 0)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Há itens zerados ou negativos na lista de reposição: ");
            foreach (var item in itensZerados)
            {
                sb.AppendLine("Cód." + item.CodigoMV + " " + item.Medicamento);
            }
            var aviso = sb.ToString();
            ShowMsgBox("Aviso", aviso);
            return true;
        }
        else
        {
            _managerStateAppService.alert = false;
            return false;
        }
    }

    private bool VerificaItensDuplicados()
    {
        var itensDuplicados = _managerStateAppService.listReposicaoComFiltro.GroupBy(g => g.CodigoMV).Where(c => c.Count() > 1).Select(s => s.Key).ToList();

        if (itensDuplicados.Count() > 0)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Há itens duplicados na lista de reposição: ");
            foreach (var item in itensDuplicados)
            {
                var itemDuplicado = _managerStateAppService.listReposicaoComFiltro.Where(x => x.CodigoMV.Equals(item)).FirstOrDefault();
                if (itemDuplicado is not null)
                {
                    sb.AppendLine("Cód." + itemDuplicado.CodigoMV + " " + itemDuplicado.Medicamento);
                }
            }
            var aviso = sb.ToString();
            ShowMsgBox("Aviso", aviso);
            return true;
        }
        else
        {
            _managerStateAppService.alert = false;
            return false;
        }
    }

    public async Task NavigateToNewTab()
    {
        string url = "/Robot";
        await js.InvokeAsync
        <object>
            ("open", url, "_blank");
    }

    private void ShowMsgBox(string titulo, string aviso)
    {
        this._managerStateAppService.tituloMsgBox = titulo;
        this._managerStateAppService.avisoMsgBox = aviso;
        _managerStateAppService.showMessageBox = true;
    }

    private void CloseMsgBox()
    {
        _managerStateAppService.showMessageBox = false;
    }
    private async void OnAtiveProdutoEstoqMinChanged(bool novoValor)
    {
        _managerStateAppService.ativeProdutoEstoqMin = novoValor;
        StateHasChanged();
        await Task.Yield();

        if (_managerStateAppService.numericField != null && _managerStateAppService.ativeProdutoEstoqMin)
        {
            await _managerStateAppService.numericField.FocusAsync();
        }
    }

   

    private async Task OpenDialogAddProduto()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ComponentAddProduto>
            ("Adicionar Novo Produto", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ComponentAddProduto.ProductModel model)
        {
            await VerificaItemExistente(model);
        }
    }

    private async Task VerificaItemExistente(ComponentAddProduto.ProductModel model)
    {
        var item = _managerStateAppService.listReposicaoComFiltro.FirstOrDefault(x => x.CodigoMV == model.IdMedicamento.ToString());
        if (item != null)
        {
            MessageItemExist();
        }
        else
        {
            var grupos = await grupoService.GetAllGrupoProdutos();

            string nomeGrupo = string.Empty;

            var grupoProduto = grupos.FirstOrDefault(x => x.Produto.IdMedicamento.ToString() == model.IdMedicamento.ToString());

            if (grupoProduto?.Grupo == null)
            {
                nomeGrupo = "PRODUTOS SEM GRUPO";
            }
            else
            {
                nomeGrupo = grupoProduto.Grupo.GroupName;
            }

            _managerStateAppService.listReposicaoComFiltro.Add(new ReposicaoEstoque
                {
                    CodigoMV = model.IdMedicamento.ToString(),
                    Reposicao = (int)model.Quantidade,
                    Medicamento = model.NomeMedicamento,
                    UltimoMovimento = DateTime.Now,
                    Unidade = model.Unidade,
                    IsAdd = true,
                    NomeGrupo = nomeGrupo

                });
            StateHasChanged();
        }
    }

    private async void MessageItemExist()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Atenção",
        "O produto já se encontra na lista!",
        yesText: "Ok", cancelText: "");

        StateHasChanged();
    }
}

