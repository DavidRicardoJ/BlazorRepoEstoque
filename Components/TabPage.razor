@using BlazorRepoEstoque.Shared.SharedState
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject ManagerStateAppService _managerStateAppService
@implements IDisposable

<MudTable Items="@Elements" Dense="@_managerStateAppService.dense" Hover="@_managerStateAppService.hover" Bordered="@_managerStateAppService.bordered" Striped="@_managerStateAppService.striped" FixedFooter="true" FixedHeader="true"
Virtualize="true" Filter="new Func<ReposicaoEstoque, bool>(FilterFunc1)" @bind-SelectedItem="_managerStateAppService.selectedItem1" RowsPerPage="@_managerStateAppService.RowsPerPage">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Medicamentos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_managerStateAppService.searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Código</MudTh>
        <MudTh>Medicamento</MudTh>
        <MudTh>Unidade</MudTh>
        <MudTh>Último Movimento</MudTh>
        <MudTh>Consumo Total</MudTh>
        <MudTh>Estoque Atual</MudTh>
        <MudTh>Dias de Estoque</MudTh>
        <MudTh>Reposição</MudTh>
        <MudTh>Excluir</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Codigo">
            <MudText Typo="Typo.body1"
            Color="@(context.IsAdd ? Color.Secondary : (context.IsEstoqMin ? Color.Primary : Color.Default))">
                @context.CodigoMV
            </MudText>
        </MudTd>

        <MudTd Style="max-width: 400px; overflow: hidden; height: auto" DataLabel="Medicamento">
            <MudTooltip Text="@(context.IsEstoqMin ? "Produto Estoque Mínimo" : (context.IsAdd ? "Produto Adicionado" : ""))"
            Placement="Placement.Top"
            Delay="500"
            Visible="@(context.IsEstoqMin || context.IsAdd)">
                <MudText Typo="Typo.body1" Color="@(context.IsAdd ? Color.Secondary : (context.IsEstoqMin ? Color.Primary : Color.Default))">
                    @context.Medicamento
                </MudText>
            </MudTooltip>
        </MudTd>

        <MudTd DataLabel="Unidade">
            <MudText Typo="Typo.body1" Color="@(context.IsAdd ? Color.Secondary : (context.IsEstoqMin ? Color.Primary : Color.Default))">                
                @context.Unidade
            </MudText>
        </MudTd>
        <MudTd DataLabel="UltimoMovimento">
            @context.UltimoMovimento.ToString("dd/MM/yyyy")
        </MudTd>

        <MudTd DataLabel="ConsumoTotal" Style="text-align: center">
            @context.ConsumoTotal
        </MudTd>

        <MudTd DataLabel="EstoqueAtual" Style="text-align: center">
            @context.EstoqueAtual
        </MudTd>

        <MudTd DataLabel="DiasDeEstoque" Style="text-align: center">
            @context.DiasDeEstoque
        </MudTd>

        <MudTd DataLabel="Reposicao">
            <input id="@context.Id" @bind-value="@context.Reposicao"
            @onkeypress="(KeyboardEventArgs e) => { Enter(e, context.Id); }"
            style="width: 80px; text-align:center; color:blue; font-weight:bold; border: none;"
            onclick="document.getElementById(@context.Id).select()">
        </MudTd>
        <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Class="ma-2" Color="Color.Error" OnClick="()=> ExcluirItem(context.Id)" /></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Linhas por página" PageSizeOptions="@_managerStateAppService.pagesize" />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch T="bool" @bind-Value="@_managerStateAppService.hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch T="bool" @bind-Value="@_managerStateAppService.dense" Color="Color.Secondary" >Dense</MudSwitch>
    <MudSwitch T="bool" @bind-Value="@_managerStateAppService.striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch T="bool" @bind-Value="@_managerStateAppService.bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selecionado: @_managerStateAppService.selectedItem1?.Medicamento</MudText>
    </div>
</div>
@code {
    [Parameter]
    public List<ReposicaoEstoque> repoList { get; set; } = new();

    private List<ReposicaoEstoque> Elements = new List<ReposicaoEstoque>();


    protected override Task OnParametersSetAsync()
    {
        Elements = repoList.OrderBy(o => o.Medicamento).ToList();
        _managerStateAppService.RowsPerPage = Elements.Count;       
        return base.OnParametersSetAsync();
    }


    private bool FilterFunc1(ReposicaoEstoque element) => FilterFunc(element, _managerStateAppService.searchString1);
    private bool FilterFunc2(ReposicaoEstoque element) => FilterFunc(element, _managerStateAppService.searchString2);

    private bool FilterFunc(ReposicaoEstoque element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Medicamento.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CodigoMV.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Enter(KeyboardEventArgs e, int id)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter" || e.Code == "Tab")
        {
            js.InvokeVoidAsync("focusById", id + 1);
            js.InvokeVoidAsync("MoveScroll", 75);
        }
    }

    private void ExcluirItem(int id)
    {
        ReposicaoEstoque item = Elements.FirstOrDefault(x => x.Id == id);
        Elements.Remove(item);
        Elements = ReordenarID(Elements);
        StateHasChanged();
        Snackbar.Add("Item excluído.", Severity.Error);
        _managerStateAppService.SetListReposicaoComFiltro(Elements);
    }

    private List<ReposicaoEstoque> ReordenarID(List<ReposicaoEstoque> list)
    {
        for (int i = 0; i < list.Count; i++)
        {
            list[i].Id = i;
        }
        return list;
    }

    public void Dispose()
    {
        _managerStateAppService.OnChange -= StateHasChanged;
    }

}
