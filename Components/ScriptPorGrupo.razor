@using System.Text
@using System.ComponentModel.DataAnnotations
@using BlazorRepoEstoque.Services.Interfaces
@using BlazorRepoEstoque.Shared.SharedState
@inject IJSRuntime js
@inject IEncryptString encrypt
@inject IDialogService DialogService
@inject ManagerStateAppService _managerStateAppService


@if (!NomesGrupos.Any())
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
}
else
{
    <MudPaper Width="100%" Height="100%" Elevation="5" Class="pa-5 d-flex align-content-center flex-column">
        <MudText Class="pa-3" Typo="Typo.h5" style="text-align: center;">Criar Script Utilizando Grupo</MudText>
        @if (alert)
        {
            <MudPaper Elevation="15" Class="d-flex align-center">
                <MudAlert Severity="Severity.Warning" Elevation="10">@message</MudAlert>
            </MudPaper>
        }
        <MudCard Style="margin-top: 30px;">
            <MudCardContent Style="width:100%">
                <MudPaper Width="300px">
                    <MudList T="string" Clickable="true">
                        @foreach (var item in NomesGrupos)
                        {
                            @if (item == "PRODUTOS SEM GRUPO")
                            {
                                <MudItem>
                                    <MudAlert Severity="Severity.Error" Dense="true" OnClick="OpenDialog" Class="my-2">Há produtos sem grupo cadastrado!</MudAlert>
                                </MudItem>
                            }
                            else
                            {
                                <MudListItem Text="@item" Icon="@Icons.Material.Filled.Send" OnClick="() => OpenDialog(item)" />
                                <MudDivider />
                            }
                        }
                    </MudList>
                </MudPaper>
            </MudCardContent>
            <MudCardActions>
                <MudButton @onclick="GeraScript" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Gerar Script</MudButton>
            </MudCardActions>
        </MudCard>
        @if (messageBox)
        {
            <MessageBox Aviso="@aviso" Titulo="@titulo" okButton="CloseMsgBox"></MessageBox>
        }
    </MudPaper>

   
}




@code {
    private bool alert = false;
    string fileName = "scriptRobot";
    private string grupoSelecionado { get; set; }    
    private IReadOnlyList<string> NomesGrupos { get; set; } = new List<string>();    

    string message;

    bool messageBox = false;
    string titulo;
    string aviso;

    protected override void OnInitialized()
    { 
        NomesGrupos = _managerStateAppService.GetListReposicaoComFiltro().Select(x => x.NomeGrupo).Distinct().OrderBy(x => x).ToList();
    }

    private void GeraScript()
    {
        if (VerificaLogin() && VerificaSeHáGrupos())
        {          
            foreach (var grupo in NomesGrupos)
            {
                if (grupo != "PRODUTOS SEM GRUPO")
                {
                    var listaDoGrupo = _managerStateAppService.GetListReposicaoComFiltro().Where(x => x.NomeGrupo == grupo).ToList();
                    _managerStateAppService.SetListReposicaoFinal(listaDoGrupo.OrderBy(x => x.Medicamento).ToList());

                    DownloadFile(fileName + $" - {grupo}.txt", encrypt.CriptografarTextoAES(_managerStateAppService.GetScriptRobot()));
                }
                else if(grupo == "PRODUTOS SEM GRUPO")
                {
                    var listaDoGrupo = _managerStateAppService.GetListReposicaoComFiltro().Where(x => x.NomeGrupo == "PRODUTOS SEM GRUPO").ToList();
                    _managerStateAppService.SetListReposicaoFinal(listaDoGrupo.OrderBy(x => x.Medicamento).ToList());

                    DownloadFile(fileName + $" - Produtos Sem Grupo.txt", encrypt.CriptografarTextoAES(_managerStateAppService.GetScriptRobot()));
                }
            }
            StateHasChanged();
            MessageSucess();
        }
    }

    private void MessageSucess()
    {
        messageBox = true;
        titulo = "Script";
        aviso = "O Script foi criado com sucesso.";
    }

    private bool VerificaLogin()
    {
        if (_managerStateAppService.loginUsuarioMV.IsValidLogin == false)
        {
            messageBox = true;
            titulo = "Login";
            aviso = "Preencha os dados de acesso ao MV";
            return false;
        }
        return true;
    }

    private bool VerificaSeHáGrupos()
    {
        return _managerStateAppService.GetListReposicaoComFiltro().Any(x => x.NomeGrupo is not null);
    }

    public async void DownloadFile(string fileName, string Content)
    {
        await js.InvokeAsync<object>("saveFile", fileName, Content);
    }

    private void CloseMsgBox()
    {
        messageBox = false;
        StateHasChanged();
    }

    private void OpenDialog()
    {
        GruposProdutosDto.ListaProdutosSemGrupoDTO = new List<ReposicaoEstoque>(_managerStateAppService.GetListReposicaoComFiltro().Where(x => x.NomeGrupo == "PRODUTOS SEM GRUPO"));
        DialogService.ShowAsync<ComponentDialog>($"{GruposProdutosDto.ListaProdutosSemGrupoDTO.Count()} Produtos sem grupo cadastrado");
    }

    private void OpenDialog(string grupoName)
    {
        GruposProdutosDto.ListaProdutosComGrupoDTO = new List<ReposicaoEstoque>(_managerStateAppService.GetListReposicaoComFiltro().Where(x => x.NomeGrupo == grupoName));
        DialogService.ShowAsync<ComponentDialogGroup>($"{GruposProdutosDto.ListaProdutosComGrupoDTO.Count()} Produtos --- {grupoName} ---");
    }
}