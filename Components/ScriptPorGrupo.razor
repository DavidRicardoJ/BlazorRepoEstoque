@using System.Text
@using System.ComponentModel.DataAnnotations
@using BlazorRepoEstoque.Services.Interfaces
@inject IJSRuntime js
@inject IGrupoServices grupoService
@inject IEncryptString encrypt
@inject IDialogService DialogService


<MudPaper Width="100%" Height="100%" Elevation="5" Class="pa-5 d-flex align-content-center flex-column">
    <MudText Class="pa-3" Typo="Typo.h5" style="text-align: center;">Criar Script Utilizando Grupo</MudText>
    @if (alert)
    {
        <MudPaper Elevation="15" Class="d-flex align-center">
            <MudAlert Severity="Severity.Warning" Elevation="10">@message</MudAlert>
        </MudPaper>
    }
    <MudCard Style="margin-top: 30px;">
        <MudCardContent Style="width:100%">
            <MudPaper Width="300px">
                <MudList Clickable="true">
                    @foreach (var item in NomesGrupos)
                    {
                        @if (item == null)
                        {<MudItem>
                                <MudAlert Severity="Severity.Error" Dense="true" OnClick="OpenDialog" Class="my-2">Há produtos sem grupo cadastrado!</MudAlert>
                        </MudItem>                          
                        }else
                        {
                            <MudListItem Text="@item" Icon="@Icons.Material.Filled.Send" />
                            <MudDivider />
                        }                        
                    }
                    
                </MudList>
            </MudPaper>
        </MudCardContent>
        <MudCardActions>
            <MudButton @onclick="GeraScript" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Gerar Script</MudButton>
        </MudCardActions>
    </MudCard>
    @if (messageBox)
    {
        <MessageBox Aviso="@aviso" Titulo="@titulo" okButton="CloseMsgBox"></MessageBox>
    }
</MudPaper>


@code {
    private bool alert = false;
    string fileName = "scriptRobot";
    private string grupoSelecionado { get; set; }
    private List<Grupo> ListGrupos { get; set; }
    private List<string> NomesGrupos { get; set; }

    private List<ReposicaoEstoque> ListReposicao { get; set; }

    string message;

    bool messageBox = false;
    string titulo;
    string aviso;


    protected override async void OnInitialized()
    {
        ListReposicao = DataReposicaoDTO.GetListReposicao().Select(x => new ReposicaoEstoque
            {
                CodigoMV = x.CodigoMV,
                ConsumoTotal = x.ConsumoTotal,
                DiasDeEstoque = x.DiasDeEstoque,
                EstoqueAtual = x.EstoqueAtual,
                Medicamento = x.Medicamento,
                Id = x.Id,
                Reposicao = x.Reposicao,
                UltimoMovimento = x.UltimoMovimento,
                Unidade = x.Unidade,
                NomeGrupo = x.NomeGrupo
            }).ToList();
        ListGrupos = await grupoService.GetAllGrupos();
        NomesGrupos = ListReposicao.Select(x => x.NomeGrupo).Distinct().OrderBy(nomeGrupo => nomeGrupo).ToList();
    }

    private void GeraScript()
    {
        if (VerificaLogin() && VerificaSeHáGrupos())
        {
            CreateScripRobot robot = new();

            foreach (var grupo in NomesGrupos)
            {
                if(grupo is not null)
                {
                    var listaDoGrupo = ListReposicao.Where(x => x.NomeGrupo == grupo).ToList();
                    DataReposicaoDTO.SetListReposicao(listaDoGrupo.OrderBy(x => x.Medicamento).ToList(), DataReposicaoDTO.Farmacia);

                    DownloadFile(fileName + $" - {grupo}.txt", encrypt.CriptografarTextoAES(robot.GetScriptRobot()));
                    StateHasChanged();
                    MessageSucess();
                }else
                {
                    var listaDoGrupo = ListReposicao.Where(x => x.NomeGrupo == null).ToList();
                    DataReposicaoDTO.SetListReposicao(listaDoGrupo.OrderBy(x => x.Medicamento).ToList(), DataReposicaoDTO.Farmacia);

                    DownloadFile(fileName + $" - Produtos Sem Grupo.txt", encrypt.CriptografarTextoAES(robot.GetScriptRobot()));
                    StateHasChanged();
                    MessageSucess();
                }
            }
        }

    }

    private void MessageSucess()
    {
        messageBox = true;
        titulo = "Script";
        aviso = "O Script foi criado com sucesso.";
    }

    private bool VerificaLogin()
    {
        if (DataReposicaoDTO.GetDadosScript() == null)
        {
            messageBox = true;
            titulo = "Login";
            aviso = "Preencha os dados de acesso ao MV";
            return false;
        }
        return true;
    }

    private bool VerificaSeHáGrupos()
    {
        return ListReposicao.Any(x => x.NomeGrupo is not null);
    }

    public async void DownloadFile(string fileName, string Content)
    {
        await js.InvokeAsync<object>("saveFile", fileName, Content);
    }

    private void CloseMsgBox()
    {
        messageBox = false;
        StateHasChanged();
    }

    private void OpenDialog()
    {
        ProdutosSemGrupo.ListaProdutosSemGrupo = new List<ReposicaoEstoque>(ListReposicao.Where(x => x.NomeGrupo is null));
        DialogService.Show<ComponentDialog>("Produtos sem grupo cadastrado");
    }
}