@using BlazorRepoEstoque.Shared.SharedState
@using System.Net.Http.Json;
@inject IJSRuntime js
@inject NavigationManager nav
@inject ManagerStateAppService _managerStateAppService
@inject HttpClient httpClient

<MudContainer Class="mt-5">


    <MudPaper Elevation="7" Style="display: flex; flex-direction: column; position: relative; top: -200px !important; /*z-index:10000;*/
justify-content: center; align-items: center; margin-bottom: 15px;" MinHeight="300px">

        <MudTreeView T="string" CheckBoxColor="Color.Tertiary" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="SelectedValues">
            <MudTreeViewItem Text="SELECIONAR UNIDADES">
                @foreach (var unidade in Unidades)
                {
                    <MudTreeViewItem Value="@unidade" />
                }
            </MudTreeViewItem>
        </MudTreeView>

        <MudItem xs="12" Style="margin-top: 30px; width: fit-content;">
            <MudText>Farmácia de Destino: <strong> @(" " + farmacia)</strong></MudText>
        </MudItem>


        <MudButton HtmlTag="btnRelatorio"
        Style="margin-top: 25px"
        Variant="Variant.Filled"
        Color="Color.Tertiary"
        StartIcon="@Icons.Custom.FileFormats.FilePdf"
        OnClick="GerarListaReposicao">
            Gerar Relatório
        </MudButton>


        <MudButton HtmlTag="btnCancelar"
        OnClick="() => Cancelar.InvokeAsync(false)"
        Style="margin-bottom: 25px; margin-top: 25px;"
        Variant="Variant.Filled"
        Color="Color.Dark"
        StartIcon="@Icons.Custom.FileFormats.FilePdf">
            Cancelar
        </MudButton>
        @if (alert)
        {
            <MudPaper Elevation="15" Class="d-flex justify-center">
                <MudAlert Severity="Severity.Warning" Elevation="10">Selecione ao menos uma unidade.</MudAlert>
            </MudPaper>
        }
    </MudPaper>
</MudContainer>


@code {


    [Parameter]
    public EventCallback<bool> Cancelar { get; set; }

    IReadOnlyCollection<string> SelectedValues { get; set; } = new List<string>();
    IReadOnlyCollection<string> Unidades { get; set; } = new List<string>();

    private bool alert = false;

    private string farmacia;

    protected override void OnInitialized()
    {
        Unidades = _managerStateAppService.GetListReposicaoComFiltro().Select(x => x.Unidade).Distinct().OrderBy(x => x).ToList();
        farmacia = _managerStateAppService.GrupoEstoque.FarmaciaDestino;
    }


    private async Task GerarListaReposicao()
    {
        if (SelectedValues.Any())
        {
            alert = false;
            List<ReposicaoEstoque> list = new();
            foreach (var item in SelectedValues)
            {
                var medicamento = _managerStateAppService.GetListReposicaoComFiltro().Where(m => m.Unidade == item).ToList();
                if (medicamento != null)
                {
                    list.AddRange(medicamento);
                }
            }
            _managerStateAppService.SetListReposicaoFinal(list.OrderBy(x => x.Medicamento).ToList());

            var dadosRelatorio = new ReportDataRequestModel
                {
                    ListaReposicao = _managerStateAppService.GetListReposicaoFinal(),
                    FarmaciaDestino = _managerStateAppService.GrupoEstoque.FarmaciaDestino
                };

            try
            {
                var response = await httpClient.PostAsJsonAsync($"{nav.BaseUri.Remove(nav.BaseUri.Length - 1, 1)}/Report/PrintReport", dadosRelatorio);

                response.EnsureSuccessStatusCode(); // Lança exceção para status code 4xx/5xx

                var pdfBytes = await response.Content.ReadAsByteArrayAsync();

                // Converta os bytes para Base64
                string base64String = Convert.ToBase64String(pdfBytes);



                await js.InvokeVoidAsync("openPdfInNewTab", "RelatorioReposicaoEstoque.pdf", base64String);


            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Erro ao chamar a API: {ex.Message}");
                // Implemente feedback visual para o usuário
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocorreu um erro: {ex.Message}");
                // Implemente feedback visual para o usuário
            }
        }
        else
        {
            alert = true;
            StateHasChanged();
        }
       // await Cancelar.InvokeAsync(true);
    }
}


