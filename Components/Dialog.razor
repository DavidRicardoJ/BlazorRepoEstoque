@using System.ComponentModel.DataAnnotations
@using System.Text
@inject IDialogService DialogService
@inject IJSRuntime js
<MudDialog>
    <DialogContent>

        <MudTreeView T="string" CheckBoxColor="Color.Tertiary" MultiSelection="true" @bind-SelectedValues="SelectedValues">
            <MudTreeViewItem Value="@("SELECIONAR UNIDADES")">
                @foreach (var unidade in Unidades)
                {
                    <MudTreeViewItem Value="@(unidade)" />
                }
            </MudTreeViewItem>
        </MudTreeView>

        <MudItem xs="12" Style="margin-top: 30px; width: 20rem;">
            <MudSelect T="string" Label="Farmácia de Destino" Variant="Variant.Text" OffsetY="true" Margin="Margin.Dense"
                       Dense="true" AnchorOrigin="Origin.BottomCenter" @bind-Value="@farmacia" FullWidth="true">
                <MudSelectItem Value="@("FARMÁCIA DA EMERGÊNCIA")" />
                <MudSelectItem Value="@("FARMÁCIA DO 3° ANDAR")" />
                <MudSelectItem Value="@("FARMÁCIA DO 6° ANDAR")" />
                <MudSelectItem Value="@("FARMÁCIA DO 7° ANDAR")" />
                <MudSelectItem Value="@("FARMÁCIA DO 7° ANDAR BLOCO C")" />
                <MudSelectItem Value="@("FARMÁCIA DO HCM SUBSOLO")" />
                <MudSelectItem Value="@("FARMÁCIA DO CENTRO CIRÚRGICO")" />
                <MudSelectItem Value="@("FARMÁCIA DO C.O.")" />
            </MudSelect>
        </MudItem>

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent Style="width:max-content">
                            <MudTextField Label="Usuário MV"
                                          @bind-Value="model.UsuarioMV" For="@(() => model.UsuarioMV)" />
                            <MudTextField Label="Senha" Class="mt-8"
                                          @bind-Value="model.Senha" For="@(() => model.Senha)" InputType="InputType.Password" />
                            <MudTextField Label="Estoque de Origem" Class="mt-8"
                                          @bind-Value="model.EstoqueOrigem" For="@(() => model.EstoqueOrigem)" InputType="InputType.Number" />
                            <MudTextField Label="Estoque de Destino" Class="mt-8"
                                          @bind-Value="model.EstoqueDestino" For="@(() => model.EstoqueDestino)" InputType="InputType.Number" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Gerar Script</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

                @if (success)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Align="Align.Center">
                            Validação ok.
                        </MudText>
                    </MudItem>
                }

            </MudGrid>
        </EditForm>
        @if (alert)
        {
            <MudPaper Elevation="15" Class="d-flex justify-center">
                <MudAlert Severity="Severity.Warning" Elevation="10">@message</MudAlert>
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {


    private IEnumerable<string> Unidades { get; set; }
    private List<ReposicaoEstoque> ListReposicao { get; set; }
    string fileName = "scriptRobot.side";
    string message;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    HashSet<string> SelectedValues { get; set; }

    private bool alert = false;

    protected override void OnInitialized()
    {
        ListReposicao = ReportDataReposicao.GetListReposicao();
        Unidades = ReportDataReposicao.GetUnidades();
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    ScriptAutomation model = new();

    bool success;
    private string farmacia;

    private void OnValidSubmit(EditContext context)
    {
        if (VerificaItemZerado())
        {
            return; 
        }
        success = true;

        ReportDataReposicao.InputDadosScript(model);
        ReportDataReposicao.Farmacia = farmacia;
        GerarListaReposicao();  
        
        Submit();       
        CreateRobot robot = new();
        DownloadFile(fileName, robot.GetScriptRobot());
        StateHasChanged();
    }

    public async void DownloadFile(string fileName, string Content)
    {
        await js.InvokeAsync<object>("saveFile", fileName, Content);
    }

    private void GerarListaReposicao()
    {
        if (SelectedValues.Any())
        {
            alert = false;
            List<ReposicaoEstoque> list = new();
            foreach (var item in SelectedValues)
            {
                var medicamento = ListReposicao.Where(m => m.Unidade == item).ToList();
                if (medicamento != null)
                {
                    list.AddRange(medicamento);
                }
            }
            ReportDataReposicao.SetListReposicao(list.OrderBy(x => x.Medicamento).ToList(), farmacia);

        }
        else
        {
            message = "Selecione ao menos uma unidade.";
            alert = true;
        }
    }

    private bool VerificaItemZerado()
    {
        var itensZerados = ListReposicao.Where(x => x.Reposicao == 0).ToList();
        if (itensZerados.Count > 0)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Há itens zerados na lista de reposição: ");
            foreach (var item in itensZerados)
            {
                sb.AppendLine("Cód." + item.CodigoMV + " " + item.Medicamento + " \n");
            }
            message = sb.ToString();
            alert = true;
            return true;
        }
        else
        {
            alert = false;
            return false;
        }
    }
}

















